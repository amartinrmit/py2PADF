
/*
 *  padfcorr.c 
 *  A.V. Martin  March 2015
 *
 *  Calculate the angular correlation function from a diffraction pattern
 *
 */


#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <math.h>
#include <string.h>
#include "settings.h"
#include "io.h"
#include "qgrids.h"

void main(int argc, char * argv[]){

  settings s;
  char outname[1024];
  char configname[1024];
  strcpy( configname, "config.txt");
  parse_config_name( argc, argv, configname );
  //printf( "%d %s %s\n", argc, argv[1], configname );

  //srand(time(NULL));

  /*
   *  Initialize file names, experiment parameters
   */
  initialize_settings( &s );
  readConfig( configname, &s);

  /*
   * allocate and read in diffraction pattern image
   */
  double * dpin;
  long n;
  int nx;
  allocate_and_read_binary_image( s.input_dp_name, &n, &dpin );
  s.nx = sqrt(n);
  printf("DEBUG nx %d\n", s.nx);
  default_settings( &s, s.nx );

  /*
   *  Print settings to screen and write to log
   */
  writeConfig( &s );

  /*
   *  Allocate polar and correlation variables
   */
  double * polar = malloc( s.nr * s.nth * sizeof(double) ) ;
  double * corr  = malloc( s.nr * s.nr * s.nth * sizeof(double) ) ;

  /*
   * Create polar plot
   */
  polar_plot( &s, dpin, polar );

  /*
   *  Calculate correlation 
   */
  correlation_rtheta( &s, polar, corr );
  
  /*
   *  Output correlation
   */
  strcpy( outname, s.outpath );
  strcat( outname, "/" );
  strcat( outname, s.tag );
  strcat( outname, "_correlation.dbin" );
  //printf("DEBUG outname %s\n", outname);
  //clock_t start = clock();
  write_dbin( outname, corr, s.nr*s.nr*s.nth );
  //clock_t end = clock();
  //printf("DEBUG writing correlation took %g seconds\n", (double) (end-start)/CLOCKS_PER_SEC );

  /*
   * free memory
   */
  free( dpin );
  free( polar );
  free( corr );

}
